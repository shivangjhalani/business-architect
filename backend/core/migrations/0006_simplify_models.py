# Generated by Django 5.2.2 on 2025-06-14 16:09

import django.db.models.deletion
from django.db import migrations, models


def remove_constraints_safely(apps, schema_editor):
    """Safely remove constraints that may or may not exist."""
    from django.db import connection
    
    cursor = connection.cursor()
    
    # List of constraints and indexes to remove
    constraints_to_remove = [
        ('core_capability', 'valid_capability_level'),
        ('core_capability', 'unique_capability_name_per_parent'),
        ('core_capabilityrecommendation', 'applied_recommendations_have_timestamp'),
        ('core_vectorembedding', 'unique_embedding_per_object'),
        ('core_vectorembedding', 'unique_vector_index_per_content_type'),
    ]
    
    indexes_to_remove = [
        ('core_businessgoal', 'core_busine_status_08f5c3_idx'),
        ('core_businessgoal', 'core_busine_title_ae698f_idx'),
        ('core_capability', 'core_capabi_status_d9026d_idx'),
        ('core_capability', 'core_capabi_parent__277f92_idx'),
        ('core_capability', 'core_capabi_name_c90319_idx'),
        ('core_capabilityrecommendation', 'core_capabi_busines_8e6788_idx'),
        ('core_capabilityrecommendation', 'core_capabi_recomme_c3d7fd_idx'),
        ('core_capabilityrecommendation', 'core_capabi_target__6dc184_idx'),
        ('core_vectorembedding', 'core_vector_content_d1f398_idx'),
        ('core_vectorembedding', 'core_vector_content_3a93bc_idx'),
        ('core_vectorembedding', 'core_vector_embeddi_534242_idx'),
    ]
    
    # Remove constraints safely
    for table_name, constraint_name in constraints_to_remove:
        try:
            cursor.execute(f"ALTER TABLE {table_name} DROP CONSTRAINT IF EXISTS {constraint_name};")
        except Exception as e:
            print(f"Constraint {constraint_name} on {table_name} doesn't exist or couldn't be removed: {e}")
    
    # Remove indexes safely
    for table_name, index_name in indexes_to_remove:
        try:
            cursor.execute(f"DROP INDEX IF EXISTS {index_name};")
        except Exception as e:
            print(f"Index {index_name} doesn't exist or couldn't be removed: {e}")


def reverse_remove_constraints(apps, schema_editor):
    """Reverse operation - we don't need to recreate the constraints."""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0005_add_pdf_file_to_businessgoal'),
    ]

    operations = [
        # First, safely remove constraints and indexes
        migrations.RunPython(remove_constraints_safely, reverse_remove_constraints),
        
        # Update model options
        migrations.AlterModelOptions(
            name='capability',
            options={'ordering': ['name'], 'verbose_name': 'Business Capability', 'verbose_name_plural': 'Business Capabilities'},
        ),
        migrations.AlterModelOptions(
            name='capabilityrecommendation',
            options={'ordering': ['-recommended_by_ai_at'], 'verbose_name': 'Capability Recommendation', 'verbose_name_plural': 'Capability Recommendations'},
        ),
        migrations.AlterModelOptions(
            name='vectorembedding',
            options={'ordering': ['-created_at'], 'verbose_name': 'Vector Embedding', 'verbose_name_plural': 'Vector Embeddings'},
        ),
        
        # Alter fields
        migrations.AlterField(
            model_name='businessgoal',
            name='description',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='businessgoal',
            name='pdf_file',
            field=models.FileField(blank=True, null=True, upload_to='business_goals/pdfs/'),
        ),
        migrations.AlterField(
            model_name='businessgoal',
            name='status',
            field=models.CharField(choices=[('PENDING_ANALYSIS', 'Pending Analysis'), ('ANALYZED', 'Analyzed'), ('RECOMMENDATIONS_APPLIED', 'Recommendations Applied'), ('CLOSED', 'Closed')], default='PENDING_ANALYSIS', max_length=30),
        ),
        migrations.AlterField(
            model_name='businessgoal',
            name='title',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='capability',
            name='description',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='capability',
            name='level',
            field=models.PositiveIntegerField(default=1),
        ),
        migrations.AlterField(
            model_name='capability',
            name='name',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='capability',
            name='notes',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterField(
            model_name='capability',
            name='owner',
            field=models.CharField(blank=True, default='', max_length=255),
        ),
        migrations.AlterField(
            model_name='capability',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.capability'),
        ),
        migrations.AlterField(
            model_name='capability',
            name='status',
            field=models.CharField(choices=[('CURRENT', 'Current'), ('PROPOSED', 'Proposed'), ('DEPRECATED', 'Deprecated'), ('ARCHIVED', 'Archived')], default='CURRENT', max_length=20),
        ),
        migrations.AlterField(
            model_name='capability',
            name='strategic_importance',
            field=models.CharField(choices=[('CRITICAL', 'Critical'), ('HIGH', 'High'), ('MEDIUM', 'Medium'), ('LOW', 'Low')], default='MEDIUM', max_length=20),
        ),
        migrations.AlterField(
            model_name='capabilityrecommendation',
            name='additional_details',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterField(
            model_name='capabilityrecommendation',
            name='applied_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='capabilityrecommendation',
            name='business_goal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='core.businessgoal'),
        ),
        migrations.AlterField(
            model_name='capabilityrecommendation',
            name='proposed_description',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterField(
            model_name='capabilityrecommendation',
            name='proposed_name',
            field=models.CharField(blank=True, default='', max_length=255),
        ),
        migrations.AlterField(
            model_name='capabilityrecommendation',
            name='proposed_parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proposed_parent_recommendations', to='core.capability'),
        ),
        migrations.AlterField(
            model_name='capabilityrecommendation',
            name='recommendation_type',
            field=models.CharField(choices=[('ADD_CAPABILITY', 'Add Capability'), ('MODIFY_CAPABILITY', 'Modify Capability'), ('DELETE_CAPABILITY', 'Delete Capability'), ('STRENGTHEN_CAPABILITY', 'Strengthen Capability'), ('MERGE_CAPABILITIES', 'Merge Capabilities'), ('SPLIT_CAPABILITY', 'Split Capability')], max_length=30),
        ),
        migrations.AlterField(
            model_name='capabilityrecommendation',
            name='status',
            field=models.CharField(choices=[('PENDING', 'Pending'), ('APPLIED', 'Applied'), ('REJECTED', 'Rejected')], default='PENDING', max_length=20),
        ),
        migrations.AlterField(
            model_name='capabilityrecommendation',
            name='target_capability',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recommendations', to='core.capability'),
        ),
        migrations.AlterField(
            model_name='vectorembedding',
            name='content_type',
            field=models.CharField(choices=[('CAPABILITY', 'Capability'), ('BUSINESS_GOAL', 'Business Goal'), ('RECOMMENDATION', 'Recommendation')], max_length=20),
        ),
        migrations.AlterField(
            model_name='vectorembedding',
            name='embedding_model',
            field=models.CharField(default='text-embedding-004', max_length=100),
        ),
        migrations.AlterField(
            model_name='vectorembedding',
            name='object_id',
            field=models.UUIDField(),
        ),
        migrations.AlterField(
            model_name='vectorembedding',
            name='text_content',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='vectorembedding',
            name='vector_index',
            field=models.IntegerField(),
        ),
    ] 